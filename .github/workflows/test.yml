name: test

on:
  pull_request:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: "3.12"
  STERN_VERSION: "1.30.0"

jobs:

  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: eifinger/setup-uv@v1
      - run: uvx ruff check .

  ruff-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      - run: uvx ruff format . --check

  build-image:
    needs: [ruff, ruff-format]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          file: resources/images/commander/Dockerfile
          context: .
          tags: bitcoindevproject/warnet-commander:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/commander.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: commander
          path: /tmp/commander.tar

  test:
    needs: [build-image]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test:
          - conf_test.py
          - dag_connection_test.py
          - logging_test.py
          - rpc_test.py
          - services_test.py
          - signet_test.py
          - scenarios_test.py
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-helm@v4.2.0
      - name: start minikube
        uses: medyagh/setup-minikube@latest
        id: minikube
        with:
          cpus: max
          memory: 4000m
      - name: Download commander artifact
        uses: actions/download-artifact@v4
        with:
          name: commander
          path: /tmp
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      - name: Install Python
        run: uv python install $PYTHON_VERSION
      - name: Install project
        run: uv sync --all-extras --dev
      - name: Install commander image
        run: |
          echo loading commander image into minikube docker
          eval $(minikube -p minikube docker-env)
          docker load --input /tmp/commander.tar
          docker image ls -a
      - name: Run tests
        run: |
          source .venv/bin/activate
          ./test/${{matrix.test}}
      - name: Collect Kubernetes logs
        if: always()
        run: |
          echo "Installing stern..."
          curl -Lo stern.tar.gz https://github.com/stern/stern/releases/download/v${STERN_VERSION}/stern_${STERN_VERSION}_linux_amd64.tar.gz
          tar zxvf stern.tar.gz
          chmod +x stern
          sudo mv stern /usr/local/bin/

          # Run script
          curl -O https://raw.githubusercontent.com/bitcoin-dev-project/warnet/main/resources/scripts/k8s-log-collector.sh
          chmod +x k8s-log-collector.sh
          ./k8s-log-collector.sh default
      - name: Upload log artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-logs-${{ matrix.test }}
          path: ./k8s-logs
          retention-days: 5
  test-without-mk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test:
          - graph_test.py
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          enable-cache: true
      - name: Install Python
        run: uv python install $PYTHON_VERSION
      - name: Install project
        run: uv sync --all-extras --dev
      - name: Run tests
        run: |
          source .venv/bin/activate
          ./test/${{matrix.test}}
