name: Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  scenarios:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [compose, k8s]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.backend == 'compose'
        uses: ./.github/actions
      - if: matrix.backend == 'k8s'
        uses: extractions/setup-just@v1
      - if: matrix.backend == 'k8s'
        uses: medyagh/setup-minikube@master
      - if: matrix.backend == 'k8s'
        run: |
          pip install --upgrade pip
          pip install -e .
          just start
          kubectl wait --for=condition=Ready --timeout=2m pod rpc-0
          kubectl port-forward svc/rpc 9276:9276 &
      - run: ./test/scenarios_test.py --backend=${{matrix.backend}}
  rpc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [compose, k8s]
        cli: [--rust_cli, ""]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.backend == 'compose'
        uses: ./.github/actions
      - if: matrix.backend == 'k8s'
        uses: extractions/setup-just@v1
      - if: matrix.backend == 'k8s'
        uses: medyagh/setup-minikube@master
      - if: matrix.cli == '--rust_cli'
        run: |
          cargo build
      - if: matrix.backend == 'k8s'
        run: |
          pip install --upgrade pip
          pip install -e .
          just start
          kubectl wait --for=condition=Ready --timeout=2m pod rpc-0
          kubectl port-forward svc/rpc 9276:9276 &
      - run: ./test/rpc_test.py --backend=${{matrix.backend}} ${{matrix.cli}}
  graph:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [compose, k8s]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.backend == 'compose'
        uses: ./.github/actions
      - if: matrix.backend == 'k8s'
        uses: extractions/setup-just@v1
      - if: matrix.backend == 'k8s'
        uses: medyagh/setup-minikube@master
      - if: matrix.backend == 'k8s'
        run: |
          pip install --upgrade pip
          pip install -e .
          just start
          kubectl wait --for=condition=Ready --timeout=2m pod rpc-0
          kubectl port-forward svc/rpc 9276:9276 &
      - run: ./test/graph_test.py --backend=${{matrix.backend}}
  ln:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [compose, k8s]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.backend == 'compose'
        uses: ./.github/actions
      - if: matrix.backend == 'k8s'
        uses: extractions/setup-just@v1
      - if: matrix.backend == 'k8s'
        uses: medyagh/setup-minikube@master
      - if: matrix.backend == 'k8s'
        run: |
          pip install --upgrade pip
          pip install -e .
          just start
          kubectl wait --for=condition=Ready --timeout=2m pod rpc-0
          kubectl port-forward svc/rpc 9276:9276 &
      - run: ./test/ln_test.py --backend=${{matrix.backend}}
  build:
    needs: [scenarios, rpc, graph, ln] # Only run if the others complete successfully as it's slow
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [compose]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
      - if: matrix.backend == 'k8s'
        uses: extractions/setup-just@v1
      - if: matrix.backend == 'k8s'
        uses: medyagh/setup-minikube@master
      - if: matrix.backend == 'k8s'
        run: |
          eval $(minikube docker-env)
          pip install --upgrade pip
          pip install -e .
          just start
          kubectl wait --for=condition=Ready --timeout=2m pod rpc-0
          kubectl port-forward svc/rpc 9276:9276 &
      - run: ./test/build_branch_test.py --backend=${{matrix.backend}}
